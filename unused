import random
import rpy2.robjects as robjects
import networkx as nx
from scipy.stats import truncexpon
from networkx.drawing.nx_agraph import to_agraph


from rpy2.robjects.packages import STAP
from scipy.sparse import csr_matrix
import scipy
from numpy import random
from numpy import savetxt
from pandas.core.common import flatten
import rpy2.robjects as ro
import copy
import networkx as nx
import scipy as sp
from random import seed
from osgeo import ogr
import osmnx as ox
import momepy
import shapefile
import geopandas
import geojson
import fiona
from shapely.geometry import shape, LineString, Point
from shapely.geometry import Polygon
from networkx.readwrite import json_graph
from mpl_toolkits.basemap import Basemap as Basemap
from difflib import SequenceMatcher
import re
# from Markov_chain_new import MarkovChain
# from KDA import KDA
import itertools
import more_itertools
from scipy.interpolate import interp1d
from discreteMarkovChain import markovChain
import datetime
from Markov_chain_new import MarkovChain
from scipy.stats import beta
from itertools import product, combinations, combinations_with_replacement


#network

import random
import rpy2.robjects as robjects
import networkx as nx
from scipy.stats import truncexpon
from networkx.drawing.nx_agraph import to_agraph
from rpy2.robjects.packages import STAP
from scipy.sparse import csr_matrix
import scipy
from numpy import random
from numpy import savetxt
from pandas.core.common import flatten
import rpy2.robjects as ro
#ro.conversion.py2rpy=numpy2ri

from osgeo import ogr
import osmnx as ox
import momepy
import shapefile
import geopandas
import geojson
import fiona
from shapely.geometry import shape, LineString, Point
from shapely.geometry import Polygon
from networkx.readwrite import json_graph
from mpl_toolkits.basemap import Basemap as Basemap
from difflib import SequenceMatcher
import re
# from Markov_chain_new import MarkovChain
# from KDA import KDA
import itertools
import more_itertools
from scipy.interpolate import interp1d
from discreteMarkovChain import markovChain
import datetime
from Markov_chain_new import MarkovChain


#subnet
from random import seed
from osgeo import ogr
import osmnx as ox
import momepy
import shapefile
import geopandas
import geojson
import fiona
from shapely.geometry import shape, LineString, Point
from shapely.geometry import Polygon
from networkx.readwrite import json_graph
from mpl_toolkits.basemap import Basemap as Basemap
from difflib import SequenceMatcher
import re
#from Markov_chain_new import MarkovChain
#from KDA import KDA
import itertools
import more_itertools
from scipy.interpolate import interp1d
from discreteMarkovChain import markovChain

#system
from random import seed
from osgeo import ogr
import osmnx as ox
import momepy
import shapefile
import geopandas
import geojson
import fiona
from shapely.geometry import shape, LineString, Point
from shapely.geometry import Polygon
from networkx.readwrite import json_graph
from mpl_toolkits.basemap import Basemap as Basemap
from difflib import SequenceMatcher
import re
#from Markov_chain_new import MarkovChain
#from KDA import KDA
import itertools
#Discretization
from random import seed
from osgeo import ogr
import osmnx as ox
import momepy
import shapefile
import geopandas
import geojson
import fiona
from shapely.geometry import shape, LineString, Point
from shapely.geometry import Polygon
from networkx.readwrite import json_graph
from mpl_toolkits.basemap import Basemap as Basemap
from difflib import SequenceMatcher
import re
#from Markov_chain_new import MarkovChain
#from KDA import KDA
import itertools
import more_itertools
from scipy.interpolate import interp1d
from discreteMarkovChain import markovChain
import datetime
from Markov_chain_new import MarkovChain
from scipy.stats import beta
from itertools import product, combinations, combinations_with_replacement
#ConditionalTables
from random import seed
from osgeo import ogr
import osmnx as ox
import momepy
import shapefile
import geopandas
import geojson
import fiona
from shapely.geometry import shape, LineString, Point
from shapely.geometry import Polygon
from networkx.readwrite import json_graph
from mpl_toolkits.basemap import Basemap as Basemap
from difflib import SequenceMatcher
import re
#from Markov_chain_new import MarkovChain
#from KDA import KDA
import itertools
import more_itertools
from scipy.interpolate import interp1d
from discreteMarkovChain import markovChain
import datetime
from Markov_chain_new import MarkovChain
from scipy.stats import beta
#Roads
from random import seed
from osgeo import ogr
import osmnx as ox
import momepy
import shapefile
import geopandas
import geojson
import fiona
from shapely.geometry import shape, LineString, Point
from shapely.geometry import Polygon
from networkx.readwrite import json_graph
from mpl_toolkits.basemap import Basemap as Basemap
from difflib import SequenceMatcher
import re
#from Markov_chain_new import MarkovChain
#from KDA import KDA
import itertools
#Roads
from discreteMarkovChain import markovChain
import datetime
from Markov_chain_new import MarkovChain



    def ConditionalProbTabLveles21GenerateJuly2022(self, DataFrameForDisLay2out, CondiProbTableLevels21, nDiscretise,
                                                   InputVarLavelNum, RM, nEdges, AllEdges):
        for edge in range(0, nEdges, 1):
            for variableO in range(0, 2, 1):
                if variableO == 0:
                    MeasureO = 'AvailDisc11'
                    DepenVar = 'Road' + str(AllEdges[edge]) + 'Avail'
                    IndepenVar = 'MaintenanceRate' + str(variableO)  # MaintenanceRates[edge])
                else:
                    DepenVar = 'Road' + str(AllEdges[edge]) + 'Costs'
                    IndepenVar = 'MaintenanceRate' + str(variableO)  # MaintenanceRates[edge])
                    MeasureO = 'TotalCostDisc11'
                for inleval in product(range(InputVarLavelNum + 1), repeat=1):
                    # for variableIOption in range(0, 2, 1):
                    # selData=DataFrameForDisLay2out[(DataFrameForDisLay2out['Edge']==edge)&(DataFrameForDisLay2out['MaintenanceRate']==RM[edge][variableIOption] )]
                    # print(inleval[0])
                    UniqselData = DataFrameForDisLay2out[(DataFrameForDisLay2out['Edge'] == AllEdges[edge])]
                    selData = DataFrameForDisLay2out[(DataFrameForDisLay2out['Edge'] == AllEdges[edge]) & (
                            DataFrameForDisLay2out['ListMaintenanceRatesCoded'] == inleval[0])]
                    lst_dic1 = []
                    lst_dic2 = []
                    conProbList = []
                    UniqnDiscretise = UniqselData[MeasureO].nunique()
                    BotVal = len(selData)
                    # for outleval in product(range(nDiscretise), repeat=1):
                    for outleval in product(range(UniqnDiscretise), repeat=1):
                        UpVal = len(selData[(selData[MeasureO] == outleval[0])])
                        # print(inleval,outleval,UpVal,BotVal,UpVal/BotVal)
                        # conProbList.append(UpVal/BotVal)
                        if BotVal != 0:
                            lst_dic1.append(
                                {'DepenVar': DepenVar, 'DepenVarLvel': outleval[0], 'IndepenVar': IndepenVar,
                                 'IndepenVarLvel': inleval[0], 'CondProb': UpVal / BotVal})
                        lst_dic2.append({'DepenVar': DepenVar, 'DepenVarLvel': outleval[0], 'IndepenVar': IndepenVar,
                                         'IndepenVarLvel': inleval[0], 'CondProb': 1 / UniqnDiscretise})
                    if BotVal != 0:  # sum(conProbList)==0:
                        #CondiProbTableLevels21 = CondiProbTableLevels21.append(lst_dic1)
                        CondiProbTableLevels21 = pd.concat(
                            [CondiProbTableLevels21, pd.DataFrame.from_dict(lst_dic1, orient='columns')])
                    else:
                        #CondiProbTableLevels21 = CondiProbTableLevels21.append(lst_dic2)
                        CondiProbTableLevels21 = pd.concat(
                            [CondiProbTableLevels21, pd.DataFrame.from_dict(lst_dic2, orient='columns')])

            #print(DataFrameForDisLay2out['Edge'], AllEdges[edge])  # edge,CondiProbTableLevels21)
        return CondiProbTableLevels21

